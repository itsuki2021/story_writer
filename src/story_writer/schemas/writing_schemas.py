from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field

from story_writer.schemas import Chapter


class CompressResult(BaseModel):
    summary_text: str = Field(..., description='The compressed context to pass to the writer')
    relevance_score: float = Field(
        ...,
        description='Float between 0 and 1 indicating the relevance of the story history to the sub-event',
    )


class RevisionResult(BaseModel):
    suggestions: str = Field(..., description='Suggestions for improving the sub-event spec')
    issues: List[str] = Field(
        ...,
        description='List of detected issues, each short string, empty if no issues detected',
    )
    revised_text: str = Field(
        ...,
        description='Final revised passage, empty if no need to revise',
    )
    confidence: float = Field(
        ...,
        description='float 0-1',
    )


class GeneratedPassage(BaseModel):
    sub_event_id: str = Field(..., description='ID of the sub-event this passage belongs to')
    context_snapshot: CompressResult = Field(..., description='Snapshot of the context used to generate the passage')
    raw_text: str = Field(..., description='Raw text generated by the model')
    revision_result: RevisionResult = Field(..., description='Revision result of the passage')
    timestamp: Optional[str] = Field(
        default_factory=lambda: datetime.now().strftime('%d/%m/%Y, %H:%M:%S'),
        description='Timestamp of when the passage was generated',
    )


class ChapterText(Chapter):
    passages: List[GeneratedPassage] = Field(..., description='List of passages generated for the chapter')
